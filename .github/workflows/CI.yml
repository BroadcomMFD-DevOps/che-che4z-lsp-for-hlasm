#
# Copyright (c) 2019 Broadcom.
# The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Broadcom, Inc. - initial API and implementation
#

name: CI

on:
  push:
    branches:
      - master
      - development
      - release**
  pull_request:
    branches:
      - master
      - development

jobs:
  formal-checks:
    name: Checks
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        run: clang-format-14 -style=file -n $(find . -name \*.h -print -o -name \*.cpp -print) 2>&1 | tee clang-format-output.txt
      - name: Upload clang-format-output.txt
        uses: actions/upload-artifact@v3
        with:
          name: clang-format-output
          path: clang-format-output.txt
      - name: Check format
        run: |
          if [ -s clang-format-output.txt ]
          then
            exit 1
          fi
      - name: Check license headers
        run: |
          chmod +x cmake/check_license.sh
          cmake/check_license.sh
      - name: PR to master is allowed only from a release branch
        if: github.event_name == 'pull_request' && github.base_ref == 'master' && !contains(github.head_ref, 'release')
        run: exit 1

  sanitizer-builds:
    name: Build with sanitizers
    runs-on: ubuntu-22.04
    needs: [formal-checks]
    strategy:
      matrix:
        include:
          - flags: address,undefined
          - flags: thread

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Requirements install
        run: sudo apt-get update && sudo apt-get install ninja-build
      - name: Configure
        run: mkdir build && cd build && cmake -G Ninja -DBUILD_VSIX=Off -DCMAKE_C_COMPILER=clang-14 -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.flags }}" -DWITH_LIBCXX=Off ../
      - name: Build
        run: cd build && cmake --build .
      - name: Test
        run: cd build/bin && ./server_test && ./library_test && ./hlasm_utils_test

  build-matrix:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [formal-checks]
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            native: linux
            container: alpine:3.16
            prereq: apk update && apk add --no-cache linux-headers git g++ cmake util-linux-dev npm ninja pkgconfig openjdk11 maven
            config: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXE_LINKER_FLAGS="-static" -DBUILD_VSIX=Off ../
            dbg-strip: cd build/bin && objcopy --only-keep-debug language_server language_server.dbg && objcopy --strip-unneeded language_server && objcopy --add-gnu-debuglink=language_server.dbg language_server
            dbg-pattern: build/bin/language_server.dbg
          - os: ubuntu-22.04
            native: wasm
            container: emscripten/emsdk:3.1.13
            prereq: sudo apt-get update && sudo apt-get install -y ninja-build maven
            config: >
              emcmake cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DDISCOVER_TESTS=Off
              -DWITH_LIBCXX=Off -DWITH_STATIC_CRT=Off -DCMAKE_CXX_FLAGS="-s USE_PTHREADS=1 -fexceptions"
              -DCMAKE_EXE_LINKER_FLAGS="-s PTHREAD_POOL_SIZE=8 -s TOTAL_MEMORY=268435456 -s PROXY_TO_PTHREAD=1 -s NODERAWFS=1 -s EXIT_RUNTIME=1 --bind"
              -DCMAKE_CROSSCOMPILING_EMULATOR="node;--experimental-wasm-threads;--experimental-wasm-bulk-memory"
              -Dgtest_disable_pthreads=On -DBUILD_VSIX=Off ../
            test: node --experimental-wasm-threads --experimental-wasm-bulk-memory ./server_test.js && node --experimental-wasm-threads --experimental-wasm-bulk-memory ./library_test.js && node --experimental-wasm-threads --experimental-wasm-bulk-memory ./hlasm_utils_test.js
            artifacts-ext: .*
          - os: windows-2022
            native: win32
            config: cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_VSIX=Off ../
            build-extra: --parallel --config Release
            artifacts-ext: .exe
          - os: macos-12
            native: darwin
            prereq: brew install ninja
            config: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(brew --prefix llvm@14)/bin/clang -DCMAKE_CXX_COMPILER=$(brew --prefix llvm@14)/bin/clang++ -DLLVM_PATH=$(brew --prefix llvm@14) -DBUILD_VSIX=Off ../
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        if: ${{ !matrix.container }}
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Requirements install
        if: ${{ matrix.prereq }}
        run: ${{ matrix.prereq }}
      - name: Configure
        run: mkdir build && cd build && ${{ matrix.config }}
      - name: Build
        run: cd build && cmake --build . ${{ matrix.build-extra }}
      - name: Server Test
        run: cd build/bin && ${{ matrix.test || './library_test && ./server_test && ./hlasm_utils_test' }}
      - name: Strip debug info
        if: ${{ matrix.dbg-strip }}
        run: ${{ matrix.dbg-strip }}
      - name: Actions artifact
        uses: actions/upload-artifact@v3
        with:
          name: language_server_${{ matrix.native }}
          path: build/bin/language_server${{ matrix.artifacts-ext }}
      - name: Actions artifact
        if: ${{ matrix.dbg-pattern }}
        uses: actions/upload-artifact@v3
        with:
          name: language_server_${{ matrix.native }}_dbg
          path: ${{ matrix.dbg-pattern }}

  test-matrix:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: [build-matrix]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            native: linux
            chmod: true
          - os: windows-2019
            native: win32
            chmod: false
          - os: macos-11
            native: darwin
            chmod: true
          - os: ubuntu-22.04
            native: linux
            chmod: true
          - os: windows-2022
            native: win32
            chmod: false
          - os: macos-12
            native: darwin
            chmod: true

    steps:
      - uses: actions/checkout@v3
      - name: Download native language server
        uses: actions/download-artifact@v3
        with:
          name: language_server_${{ matrix.native }}
          path: clients/vscode-hlasmplugin/bin/${{ matrix.native }}/
      - name: Run chmod
        if: ${{ matrix.chmod }}
        run: chmod +x clients/vscode-hlasmplugin/bin/${{ matrix.native }}/language_server
      - name: Download wasm language server
        uses: actions/download-artifact@v3
        with:
          name: language_server_wasm
          path: clients/vscode-hlasmplugin/bin/wasm/
      - name: NPM CI
        run: npm --prefix clients/vscode-hlasmplugin ci
      - name: Extension Test
        run: cd clients/vscode-hlasmplugin && ${{ matrix.native == 'linux' && 'xvfb-run -a' || '' }} npm run test
      - name: Extension Test WASM
        run: cd clients/vscode-hlasmplugin && ${{ matrix.native == 'linux' && 'xvfb-run -a' || '' }} npm run test:wasm
      - name: Extension Test Insiders
        run: cd clients/vscode-hlasmplugin && ${{ matrix.native == 'linux' && 'xvfb-run -a' || '' }} npm run test:insiders

  VSIX:
    runs-on: ubuntu-22.04
    needs: [test-matrix]

    steps:
      - uses: actions/checkout@v3
      - name: Download windows language server
        uses: actions/download-artifact@v3
        with:
          name: language_server_win32
          path: clients/vscode-hlasmplugin/bin/win32/
      - name: Download linux language server
        uses: actions/download-artifact@v3
        with:
          name: language_server_linux
          path: clients/vscode-hlasmplugin/bin/linux/
      - name: Download wasm language server
        uses: actions/download-artifact@v3
        with:
          name: language_server_wasm
          path: clients/vscode-hlasmplugin/bin/wasm/
      - name: Download MacOS language server
        uses: actions/download-artifact@v3
        with:
          name: language_server_darwin
          path: clients/vscode-hlasmplugin/bin/darwin/
      - name: Set executable flag
        run: |
          chmod +x clients/vscode-hlasmplugin/bin/darwin/language_server
          chmod +x clients/vscode-hlasmplugin/bin/linux/language_server
      - name: Extract branch name
        run: echo BRANCH=${GITHUB_REF#refs/heads/} >> $GITHUB_ENV
      - name: Update version
        if: env.BRANCH == 'master' || startsWith(env.BRANCH, 'release')
        run: cd clients/vscode-hlasmplugin && npm ci && npm run compile && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Inject telemetry key
        run: |
          cd clients/vscode-hlasmplugin/src
          export TEL_KEY=`node -e "console.log(Buffer.from('${{ secrets.TELEMETRY_KEY }}').toString('base64'))"`
          sed -i "s/const TELEMETRY_KEY_ENCODED = TELEMETRY_DEFAULT_KEY/const TELEMETRY_KEY_ENCODED = '$TEL_KEY'/" telemetry.ts
      - name: Package VSIX
        run: cd clients/vscode-hlasmplugin/ && npm ci && npm run compile && npx vsce package -o vscode-hlasmplugin.vsix --baseContentUrl "https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/"
      - name: Get version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Upload VSIX
        uses: actions/upload-artifact@v3
        with:
          name: hlasm-language-support-${{ env.VERSION }}.vsix
          path: clients/vscode-hlasmplugin/vscode-hlasmplugin.vsix

  release:
    name: Release VSIXs
    runs-on: ubuntu-22.04
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release'))
    needs: [VSIX]

    steps:
      - uses: actions/checkout@v3
      - name: Update version
        run: cd clients/vscode-hlasmplugin && npm ci && npm run compile && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get new version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Download VSIX
        uses: actions/download-artifact@v3
        with:
          name: hlasm-language-support-${{ env.VERSION }}.vsix
          path: clients/vscode-hlasmplugin/
      - name: Rename VSIXs
        run: |
          cd clients/vscode-hlasmplugin/
          mv hlasm-language-support-${{ env.VERSION }}.vsix         multi.vsix

      - name: Commit changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git add CHANGELOG.md clients/vscode-hlasmplugin/package.json clients/vscode-hlasmplugin/CHANGELOG.md
          git commit -m "chore: Update version & changelog [skip ci]"
      - name: Push changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release new version
        run: cd clients/vscode-hlasmplugin && npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge master into development
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git stash
          git fetch
          git checkout origin/development
          git merge origin/master

          cd clients/vscode-hlasmplugin
          sed -i 's/"version": "\(.*\)"/"version": "\1-NEXT"/g' package.json
          sed -i '2s/^/\n## ****Unreleased****\n/' CHANGELOG.md
          git add package.json CHANGELOG.md
          git commit -m "chore: Prepare for next development cycle [skip ci]"
      - name: Push changes
        if: github.event_name == 'push'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: development

      - name: Delete PRs head branches
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branches: release-${{ env.VERSION }}

  theia-test:
    name: Theia Integration Test
    runs-on: ubuntu-22.04
    needs: VSIX
    strategy:
      matrix:
        theia: ["quay.io/zowe-explorer/theia:1.25.0"] 
# theiaide images not supported anymore, replaced with a quay mirror until there is something official again. See also https://github.com/theia-ide/theia-apps/issues/496
    container:
      image: ${{ matrix.theia }}
      options: --user root

    steps:
      - name: Workaround for git safe.directory feature
        run: chown root:root .
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Chromium
        run: apk add --no-cache chromium
      - name: Extract branch name
        run: echo BRANCH=${GITHUB_REF#refs/heads/} >> $GITHUB_ENV
      - name: Update version
        if: env.BRANCH == 'master' || startsWith(env.BRANCH, 'release')
        run: cd clients/vscode-hlasmplugin && npm ci && npm run compile && npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get version
        run: echo VERSION=$(node -e "console.log(require('./clients/vscode-hlasmplugin/package.json').version)") >> $GITHUB_ENV
      - name: Download VSIX
        uses: actions/download-artifact@v3
        with:
          name: hlasm-language-support-${{ env.VERSION }}.vsix
          path: clients/vscode-hlasmplugin/plugin/
      - name: npm ci
        run: cd clients/vscode-hlasmplugin && npm ci
      - name: Run Theia Tests
        run: cd clients/vscode-hlasmplugin && npm run test:theia /home/theia/
