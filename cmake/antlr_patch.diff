diff --git a/runtime/Cpp/runtime/src/DefaultErrorStrategy.cpp b/runtime/Cpp/runtime/src/DefaultErrorStrategy.cpp
index 54d35ee3b..f7d033e3f 100755
--- a/runtime/Cpp/runtime/src/DefaultErrorStrategy.cpp
+++ b/runtime/Cpp/runtime/src/DefaultErrorStrategy.cpp
@@ -101,7 +101,7 @@ void DefaultErrorStrategy::sync(Parser *recognizer) {
   size_t la = tokens->LA(1);
 
   // try cheaper subset first; might get lucky. seems to shave a wee bit off
-  auto nextTokens = recognizer->getATN().nextTokens(s);
+  const auto &nextTokens = recognizer->getATN().nextTokens(s);
   if (nextTokens.contains(Token::EPSILON) || nextTokens.contains(la)) {
     return;
   }
@@ -310,8 +310,7 @@ misc::IntervalSet DefaultErrorStrategy::getErrorRecoverySet(Parser *recognizer)
     // compute what follows who invoked us
     atn::ATNState *invokingState = atn.states[ctx->invokingState];
     const atn::RuleTransition *rt = downCast<const atn::RuleTransition*>(invokingState->transitions[0].get());
-    misc::IntervalSet follow = atn.nextTokens(rt->followState);
-    recoverSet.addAll(follow);
+    recoverSet.addAll(atn.nextTokens(rt->followState));
 
     if (ctx->parent == nullptr)
       break;
diff --git a/runtime/Cpp/runtime/src/Parser.cpp b/runtime/Cpp/runtime/src/Parser.cpp
index 337bcba17..391a8ce05 100755
--- a/runtime/Cpp/runtime/src/Parser.cpp
+++ b/runtime/Cpp/runtime/src/Parser.cpp
@@ -35,7 +35,6 @@ using namespace antlrcpp;
 namespace {
 
 struct BypassAltsAtnCache final {
-  std::shared_mutex mutex;
   /// This field maps from the serialized ATN string to the deserialized <seealso cref="ATN"/> with
   /// bypass alternatives.
   ///
@@ -44,8 +43,8 @@ struct BypassAltsAtnCache final {
 };
 
 BypassAltsAtnCache* getBypassAltsAtnCache() {
-  static BypassAltsAtnCache* const instance = new BypassAltsAtnCache();
-  return instance;
+  static thread_local BypassAltsAtnCache instance;
+  return &instance;
 }
 
 }
@@ -238,14 +237,12 @@ const atn::ATN& Parser::getATNWithBypassAlts() {
   //      How large can that thing become?
   auto *cache = getBypassAltsAtnCache();
   {
-    std::shared_lock<std::shared_mutex> lock(cache->mutex);
     auto existing = cache->map.find(serializedAtn);
     if (existing != cache->map.end()) {
       return *existing->second;
     }
   }
 
-  std::unique_lock<std::shared_mutex> lock(cache->mutex);
   auto existing = cache->map.find(serializedAtn);
   if (existing != cache->map.end()) {
     return *existing->second;
@@ -575,7 +572,6 @@ std::vector<std::string> Parser::getRuleInvocationStack(RuleContext *p) {
 std::vector<std::string> Parser::getDFAStrings() {
   atn::ParserATNSimulator *simulator = getInterpreter<atn::ParserATNSimulator>();
   if (!simulator->decisionToDFA.empty()) {
-    UniqueLock<Mutex> lck(_mutex);
 
     std::vector<std::string> s;
     for (size_t d = 0; d < simulator->decisionToDFA.size(); d++) {
@@ -590,7 +586,6 @@ std::vector<std::string> Parser::getDFAStrings() {
 void Parser::dumpDFA() {
   atn::ParserATNSimulator *simulator = getInterpreter<atn::ParserATNSimulator>();
   if (!simulator->decisionToDFA.empty()) {
-    UniqueLock<Mutex> lck(_mutex);
     bool seenOne = false;
     for (size_t d = 0; d < simulator->decisionToDFA.size(); d++) {
       dfa::DFA &dfa = simulator->decisionToDFA[d];
diff --git a/runtime/Cpp/runtime/src/Recognizer.cpp b/runtime/Cpp/runtime/src/Recognizer.cpp
index c8a183324..15c6bb98d 100755
--- a/runtime/Cpp/runtime/src/Recognizer.cpp
+++ b/runtime/Cpp/runtime/src/Recognizer.cpp
@@ -20,8 +20,8 @@ using namespace antlr4;
 using namespace antlr4::atn;
 using namespace antlr4::internal;
 
-std::map<const dfa::Vocabulary*, std::map<std::string_view, size_t>> Recognizer::_tokenTypeMapCache;
-std::map<std::vector<std::string>, std::map<std::string, size_t>> Recognizer::_ruleIndexMapCache;
+thread_local std::map<const dfa::Vocabulary*, std::map<std::string_view, size_t>> Recognizer::_tokenTypeMapCache;
+thread_local std::map<std::vector<std::string>, std::map<std::string, size_t>> Recognizer::_ruleIndexMapCache;
 
 Recognizer::Recognizer() {
   InitializeInstanceFields();
@@ -34,7 +34,6 @@ Recognizer::~Recognizer() {
 std::map<std::string_view, size_t> Recognizer::getTokenTypeMap() {
   const dfa::Vocabulary& vocabulary = getVocabulary();
 
-  UniqueLock<Mutex> lck(_mutex);
   std::map<std::string_view, size_t> result;
   auto iterator = _tokenTypeMapCache.find(&vocabulary);
   if (iterator != _tokenTypeMapCache.end()) {
@@ -64,7 +63,6 @@ std::map<std::string, size_t> Recognizer::getRuleIndexMap() {
     throw "The current recognizer does not provide a list of rule names.";
   }
 
-  UniqueLock<Mutex> lck(_mutex);
   std::map<std::string, size_t> result;
   auto iterator = _ruleIndexMapCache.find(ruleNames);
   if (iterator != _ruleIndexMapCache.end()) {
diff --git a/runtime/Cpp/runtime/src/Recognizer.h b/runtime/Cpp/runtime/src/Recognizer.h
index bc62aea23..34abbc5e4 100755
--- a/runtime/Cpp/runtime/src/Recognizer.h
+++ b/runtime/Cpp/runtime/src/Recognizer.h
@@ -142,12 +142,9 @@ namespace antlr4 {
   protected:
     atn::ATNSimulator *_interpreter; // Set and deleted in descendants (or the profiler).
 
-    // Mutex to manage synchronized access for multithreading.
-    internal::Mutex _mutex;
-
   private:
-    static std::map<const dfa::Vocabulary*, std::map<std::string_view, size_t>> _tokenTypeMapCache;
-    static std::map<std::vector<std::string>, std::map<std::string, size_t>> _ruleIndexMapCache;
+    static thread_local std::map<const dfa::Vocabulary*, std::map<std::string_view, size_t>> _tokenTypeMapCache;
+    static thread_local std::map<std::vector<std::string>, std::map<std::string, size_t>> _ruleIndexMapCache;
 
     ProxyErrorListener _proxListener; // Manages a collection of listeners.
 
diff --git a/runtime/Cpp/runtime/src/RuleContext.cpp b/runtime/Cpp/runtime/src/RuleContext.cpp
index 3ed945fc1..a29e5f4bc 100755
--- a/runtime/Cpp/runtime/src/RuleContext.cpp
+++ b/runtime/Cpp/runtime/src/RuleContext.cpp
@@ -51,14 +51,14 @@ std::string RuleContext::getText() {
     return "";
   }
 
-  std::stringstream ss;
+  std::string result;
   for (size_t i = 0; i < children.size(); i++) {
     ParseTree *tree = children[i];
     if (tree != nullptr)
-      ss << tree->getText();
+      result.append(tree->getText());
   }
 
-  return ss.str();
+  return result;
 }
 
 size_t RuleContext::getRuleIndex() const {
diff --git a/runtime/Cpp/runtime/src/Token.cpp b/runtime/Cpp/runtime/src/Token.cpp
index 31266b42d..54a1a9b59 100644
--- a/runtime/Cpp/runtime/src/Token.cpp
+++ b/runtime/Cpp/runtime/src/Token.cpp
@@ -5,5 +5,3 @@
 
 #include "Token.h"
 
-antlr4::Token::~Token() {
-}
diff --git a/runtime/Cpp/runtime/src/Token.h b/runtime/Cpp/runtime/src/Token.h
index 6f3fa76c1..782cdd212 100755
--- a/runtime/Cpp/runtime/src/Token.h
+++ b/runtime/Cpp/runtime/src/Token.h
@@ -22,7 +22,7 @@ namespace antlr4 {
     static constexpr size_t MIN_USER_TOKEN_TYPE = 1;
     static constexpr size_t EOF = IntStream::EOF;
 
-    virtual ~Token();
+    virtual ~Token() = default;
 
     /// All tokens go to the parser (unless skip() is called in that rule)
     /// on a particular "channel".  The parser tunes to a particular channel
diff --git a/runtime/Cpp/runtime/src/atn/ATN.cpp b/runtime/Cpp/runtime/src/atn/ATN.cpp
index c434c933d..fce6d29e2 100755
--- a/runtime/Cpp/runtime/src/atn/ATN.cpp
+++ b/runtime/Cpp/runtime/src/atn/ATN.cpp
@@ -39,7 +39,6 @@ misc::IntervalSet ATN::nextTokens(ATNState *s, RuleContext *ctx) const {
 
 misc::IntervalSet const& ATN::nextTokens(ATNState *s) const {
   if (!s->_nextTokenUpdated) {
-    UniqueLock<Mutex> lock(_mutex);
     if (!s->_nextTokenUpdated) {
       s->_nextTokenWithinRule = nextTokens(s, nullptr);
       s->_nextTokenUpdated = true;
@@ -86,19 +85,19 @@ misc::IntervalSet ATN::getExpectedTokens(size_t stateNumber, RuleContext *contex
 
   RuleContext *ctx = context;
   ATNState *s = states.at(stateNumber);
-  misc::IntervalSet following = nextTokens(s);
-  if (!following.contains(Token::EPSILON)) {
-    return following;
+  const misc::IntervalSet* following = &nextTokens(s);
+  if (!following->contains(Token::EPSILON)) {
+    return *following;
   }
 
   misc::IntervalSet expected;
-  expected.addAll(following);
+  expected.addAll(*following);
   expected.remove(Token::EPSILON);
-  while (ctx && ctx->invokingState != ATNState::INVALID_STATE_NUMBER && following.contains(Token::EPSILON)) {
+  while (ctx && ctx->invokingState != ATNState::INVALID_STATE_NUMBER && following->contains(Token::EPSILON)) {
     ATNState *invokingState = states.at(ctx->invokingState);
     const RuleTransition *rt = static_cast<const RuleTransition*>(invokingState->transitions[0].get());
-    following = nextTokens(rt->followState);
-    expected.addAll(following);
+    following = &nextTokens(rt->followState);
+    expected.addAll(*following);
     expected.remove(Token::EPSILON);
 
     if (ctx->parent == nullptr) {
@@ -107,7 +106,7 @@ misc::IntervalSet ATN::getExpectedTokens(size_t stateNumber, RuleContext *contex
     ctx = static_cast<RuleContext *>(ctx->parent);
   }
 
-  if (following.contains(Token::EPSILON)) {
+  if (following->contains(Token::EPSILON)) {
     expected.add(Token::EOF);
   }
 
diff --git a/runtime/Cpp/runtime/src/atn/ATN.h b/runtime/Cpp/runtime/src/atn/ATN.h
index 1fc3fa32c..b311054b8 100755
--- a/runtime/Cpp/runtime/src/atn/ATN.h
+++ b/runtime/Cpp/runtime/src/atn/ATN.h
@@ -123,10 +123,6 @@ namespace atn {
   private:
     friend class LexerATNSimulator;
     friend class ParserATNSimulator;
-
-    mutable internal::Mutex _mutex;
-    mutable internal::SharedMutex _stateMutex;
-    mutable internal::SharedMutex _edgeMutex;
   };
 
 } // namespace atn
diff --git a/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.cpp b/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.cpp
index c1e1499f8..8f1511c0a 100755
--- a/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.cpp
+++ b/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.cpp
@@ -13,9 +13,8 @@ ATNDeserializationOptions::ATNDeserializationOptions(ATNDeserializationOptions *
     : _readOnly(false), _verifyATN(options->_verifyATN),
       _generateRuleBypassTransitions(options->_generateRuleBypassTransitions) {}
 
-const ATNDeserializationOptions& ATNDeserializationOptions::getDefaultOptions() {
-  static const ATNDeserializationOptions* const defaultOptions = new ATNDeserializationOptions();
-  return *defaultOptions;
+ATNDeserializationOptions ATNDeserializationOptions::getDefaultOptions() {
+  return ATNDeserializationOptions();
 }
 
 void ATNDeserializationOptions::makeReadOnly() {
diff --git a/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.h b/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.h
index 8b1f9850b..5372fdcbe 100755
--- a/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.h
+++ b/runtime/Cpp/runtime/src/atn/ATNDeserializationOptions.h
@@ -22,7 +22,7 @@ public:
 
   ATNDeserializationOptions& operator=(const ATNDeserializationOptions&) = default;
 
-  static const ATNDeserializationOptions& getDefaultOptions();
+  static ATNDeserializationOptions getDefaultOptions();
 
   bool isReadOnly() const { return _readOnly; }
 
diff --git a/runtime/Cpp/runtime/src/atn/LexerATNSimulator.cpp b/runtime/Cpp/runtime/src/atn/LexerATNSimulator.cpp
index cc42a2381..f41be8f51 100755
--- a/runtime/Cpp/runtime/src/atn/LexerATNSimulator.cpp
+++ b/runtime/Cpp/runtime/src/atn/LexerATNSimulator.cpp
@@ -71,7 +71,6 @@ size_t LexerATNSimulator::match(CharStream *input, size_t mode) {
   const dfa::DFA &dfa = _decisionToDFA[mode];
   dfa::DFAState* s0;
   {
-    SharedLock<SharedMutex> stateLock(atn._stateMutex);
     s0 = dfa.s0;
   }
   if (s0 == nullptr) {
@@ -173,7 +172,6 @@ size_t LexerATNSimulator::execATN(CharStream *input, dfa::DFAState *ds0) {
 
 dfa::DFAState *LexerATNSimulator::getExistingTargetState(dfa::DFAState *s, size_t t) {
   dfa::DFAState* retval = nullptr;
-  SharedLock<SharedMutex> edgeLock(atn._edgeMutex);
   if (t <= MAX_DFA_EDGE) {
     auto iterator = s->edges.find(t - MIN_DFA_EDGE);
 #if LEXER_DEBUG_ATN == 1
@@ -519,7 +517,6 @@ void LexerATNSimulator::addDFAEdge(dfa::DFAState *p, size_t t, dfa::DFAState *q)
     return;
   }
 
-  UniqueLock<SharedMutex> edgeLock(atn._edgeMutex);
   p->edges[t - MIN_DFA_EDGE] = q; // connect
 }
 
@@ -551,7 +548,6 @@ dfa::DFAState *LexerATNSimulator::addDFAState(ATNConfigSet *configs, bool suppre
   dfa::DFA &dfa = _decisionToDFA[_mode];
 
   {
-    UniqueLock<SharedMutex> stateLock(atn._stateMutex);
     auto [existing, inserted] = dfa.states.insert(proposed);
     if (!inserted) {
       delete proposed;
diff --git a/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp b/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp
index 3a1537587..66d492bd9 100755
--- a/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp
+++ b/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp
@@ -116,11 +116,9 @@ size_t ParserATNSimulator::adaptivePredict(TokenStream *input, size_t decision,
 
   dfa::DFAState *s0;
   {
-    SharedLock<SharedMutex> stateLock(atn._stateMutex);
     if (dfa.isPrecedenceDfa()) {
       // the start state for a precedence DFA depends on the current
       // parser precedence, and is provided by a DFA method.
-      SharedLock<SharedMutex> edgeLock(atn._edgeMutex);
       s0 = dfa.getPrecedenceStartState(parser->getPrecedence());
     } else {
       // the start state for a "regular" DFA is just s0
@@ -132,7 +130,6 @@ size_t ParserATNSimulator::adaptivePredict(TokenStream *input, size_t decision,
     auto s0_closure = computeStartState(dfa.atnStartState, &ParserRuleContext::EMPTY, false);
     std::unique_ptr<dfa::DFAState> newState;
     std::unique_ptr<dfa::DFAState> oldState;
-    UniqueLock<SharedMutex> stateLock(atn._stateMutex);
     dfa::DFAState* ds0 = dfa.s0;
     if (dfa.isPrecedenceDfa()) {
       /* If this is a precedence DFA, we use applyPrecedenceFilter
@@ -144,7 +141,6 @@ size_t ParserATNSimulator::adaptivePredict(TokenStream *input, size_t decision,
       ds0->configs = std::move(s0_closure); // not used for prediction but useful to know start configs anyway
       newState = std::make_unique<dfa::DFAState>(applyPrecedenceFilter(ds0->configs.get()));
       s0 = addDFAState(dfa, newState.get());
-      UniqueLock<SharedMutex> edgeLock(atn._edgeMutex);
       dfa.setPrecedenceStartState(parser->getPrecedence(), s0);
     } else {
       newState = std::make_unique<dfa::DFAState>(std::move(s0_closure));
@@ -282,7 +278,6 @@ size_t ParserATNSimulator::execATN(dfa::DFA &dfa, dfa::DFAState *s0, TokenStream
 
 dfa::DFAState *ParserATNSimulator::getExistingTargetState(dfa::DFAState *previousD, size_t t) {
   dfa::DFAState* retval;
-  SharedLock<SharedMutex> edgeLock(atn._edgeMutex);
   auto iterator = previousD->edges.find(t);
   retval = (iterator == previousD->edges.end()) ? nullptr : iterator->second;
   return retval;
@@ -601,8 +596,7 @@ ATNConfigSet* ParserATNSimulator::removeAllConfigsNotInRuleStopState(ATNConfigSe
     }
 
     if (lookToEndOfRule && config->state->epsilonOnlyTransitions) {
-      misc::IntervalSet nextTokens = atn.nextTokens(config->state);
-      if (nextTokens.contains(Token::EPSILON)) {
+      if (atn.nextTokens(config->state).contains(Token::EPSILON)) {
         ATNState *endOfRuleState = atn.ruleToStopState[config->state->ruleIndex];
         result->add(std::make_shared<ATNConfig>(*config, endOfRuleState), &mergeCache);
       }
@@ -1283,7 +1277,6 @@ dfa::DFAState *ParserATNSimulator::addDFAEdge(dfa::DFA &dfa, dfa::DFAState *from
   }
 
   {
-    UniqueLock<SharedMutex> stateLock(atn._stateMutex);
     to = addDFAState(dfa, to); // used existing if possible not incoming
   }
   if (from == nullptr || t > (int)atn.maxTokenType) {
@@ -1291,7 +1284,6 @@ dfa::DFAState *ParserATNSimulator::addDFAEdge(dfa::DFA &dfa, dfa::DFAState *from
   }
 
   {
-    UniqueLock<SharedMutex> edgeLock(atn._edgeMutex);
     from->edges[t] = to; // connect
   }
 
diff --git a/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.cpp b/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.cpp
index 7160b5999..f2a3fbec3 100644
--- a/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.cpp
+++ b/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.cpp
@@ -47,28 +47,22 @@ Ref<const PredictionContext> PredictionContextMergeCache::put(
 
   auto [existing, inserted] = _entries.try_emplace(std::make_pair(key1.get(), key2.get()));
   if (inserted) {
-    try {
-      existing->second.reset(new Entry());
-    } catch (...) {
-      _entries.erase(existing);
-      throw;
-    }
-    existing->second->key = std::make_pair(key1, key2);
-    existing->second->value = std::move(value);
-    pushToFront(existing->second.get());
+    existing->second.key = std::make_pair(key1, key2);
+    existing->second.value = std::move(value);
+    pushToFront(&existing->second);
   } else {
-    if (existing->second->value != value) {
-      existing->second->value = std::move(value);
+    if (existing->second.value != value) {
+      existing->second.value = std::move(value);
     }
-    moveToFront(existing->second.get());
+    moveToFront(&existing->second);
   }
-  compact(existing->second.get());
-  return existing->second->value;
+  compact(&existing->second);
+  return existing->second.value;
 }
 
 Ref<const PredictionContext> PredictionContextMergeCache::get(
     const Ref<const PredictionContext> &key1,
-    const Ref<const PredictionContext> &key2) const {
+    const Ref<const PredictionContext> &key2) {
   assert(key1);
   assert(key2);
 
@@ -81,17 +75,17 @@ Ref<const PredictionContext> PredictionContextMergeCache::get(
   if (iterator == _entries.end()) {
     return nullptr;
   }
-  moveToFront(iterator->second.get());
-  return iterator->second->value;
+  moveToFront(&iterator->second);
+  return iterator->second.value;
 }
 
 void PredictionContextMergeCache::clear() {
-  Container().swap(_entries);
+  _entries.clear();
   _head = _tail = nullptr;
   _size = 0;
 }
 
-void PredictionContextMergeCache::moveToFront(Entry *entry) const {
+void PredictionContextMergeCache::moveToFront(Entry *entry) {
   if (entry->prev == nullptr) {
     assert(entry == _head);
     return;
diff --git a/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.h b/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.h
index efaeaef57..d70eeab3c 100644
--- a/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.h
+++ b/runtime/Cpp/runtime/src/atn/PredictionContextMergeCache.h
@@ -52,7 +52,7 @@ namespace atn {
                                      Ref<const PredictionContext> value);
 
     Ref<const PredictionContext> get(const Ref<const PredictionContext> &key1,
-                                     const Ref<const PredictionContext> &key2) const;
+                                     const Ref<const PredictionContext> &key2);
 
     const PredictionContextMergeCacheOptions& getOptions() const { return _options; }
 
@@ -76,7 +76,7 @@ namespace atn {
       Entry *next = nullptr;
     };
 
-    void moveToFront(Entry *entry) const;
+    void moveToFront(Entry *entry);
 
     void pushToFront(Entry *entry);
 
@@ -84,7 +84,7 @@ namespace atn {
 
     void compact(const Entry *preserve);
 
-    using Container = FlatHashMap<PredictionContextPair, std::unique_ptr<Entry>,
+    using Container = FlatHashMap<PredictionContextPair, Entry,
                                   PredictionContextHasher, PredictionContextComparer>;
 
     const PredictionContextMergeCacheOptions _options;
diff --git a/runtime/Cpp/runtime/src/tree/xpath/XPathLexer.cpp b/runtime/Cpp/runtime/src/tree/xpath/XPathLexer.cpp
index 4d7448a89..c5f2b5fa7 100644
--- a/runtime/Cpp/runtime/src/tree/xpath/XPathLexer.cpp
+++ b/runtime/Cpp/runtime/src/tree/xpath/XPathLexer.cpp
@@ -42,19 +42,13 @@ struct XPathLexerStaticData final {
 };
 
 ::antlr4::internal::OnceFlag xpathlexerLexerOnceFlag;
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
 static thread_local
-#endif
-XPathLexerStaticData *xpathlexerLexerStaticData = nullptr;
+std::unique_ptr<XPathLexerStaticData> xpathlexerLexerStaticData = nullptr;
 
 void xpathlexerLexerInitialize() {
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
   if (xpathlexerLexerStaticData != nullptr) {
     return;
   }
-#else
-  assert(xpathlexerLexerStaticData == nullptr);
-#endif
   auto staticData = std::make_unique<XPathLexerStaticData>(
     std::vector<std::string>{
       "ANYWHERE", "ROOT", "WILDCARD", "BANG", "ID", "NameChar", "NameStartChar", 
@@ -103,7 +97,7 @@ void xpathlexerLexerInitialize() {
   for (size_t i = 0; i < count; i++) { 
     staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
   }
-  xpathlexerLexerStaticData = staticData.release();
+  xpathlexerLexerStaticData = std::move(staticData);
 }
 
 }
@@ -172,9 +166,5 @@ void XPathLexer::IDAction(antlr4::RuleContext *context, size_t actionIndex) {
 
 
 void XPathLexer::initialize() {
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
   xpathlexerLexerInitialize();
-#else
-  ::antlr4::internal::call_once(xpathlexerLexerOnceFlag, xpathlexerLexerInitialize);
-#endif
 }
diff --git a/tool/resources/org/antlr/v4/tool/templates/codegen/Cpp/Cpp.stg b/tool/resources/org/antlr/v4/tool/templates/codegen/Cpp/Cpp.stg
index 6fc4419d0..79b3dceba 100644
--- a/tool/resources/org/antlr/v4/tool/templates/codegen/Cpp/Cpp.stg
+++ b/tool/resources/org/antlr/v4/tool/templates/codegen/Cpp/Cpp.stg
@@ -144,19 +144,13 @@ struct <lexer.name; format = "cap">StaticData final {
 };
 
 ::antlr4::internal::OnceFlag <lexer.grammarName; format = "lower">LexerOnceFlag;
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
 static thread_local
-#endif
-<lexer.name; format = "cap">StaticData *<lexer.grammarName; format = "lower">LexerStaticData = nullptr;
+std::unique_ptr\<<lexer.name; format = "cap">StaticData> <lexer.grammarName; format = "lower">LexerStaticData = nullptr;
 
 void <lexer.grammarName; format = "lower">LexerInitialize() {
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
   if (<lexer.grammarName; format = "lower">LexerStaticData != nullptr) {
     return;
   }
-#else
-  assert(<lexer.grammarName; format = "lower">LexerStaticData == nullptr);
-#endif
   auto staticData = std::make_unique\<<lexer.name; format = "cap">StaticData>(
     std::vector\<std::string>{
       <lexer.ruleNames: {r | "<r>"}; separator = ", ", wrap, anchor>
@@ -175,7 +169,7 @@ void <lexer.grammarName; format = "lower">LexerInitialize() {
     }
   );
   <atn>
-  <lexer.grammarName; format = "lower">LexerStaticData = staticData.release();
+  <lexer.grammarName; format = "lower">LexerStaticData = std::move(staticData);
 }
 
 }
@@ -247,11 +241,7 @@ bool <lexer.name>::sempred(RuleContext *context, size_t ruleIndex, size_t predic
 <sempredFuncs.values; separator="\n">
 
 void <lexer.name>::initialize() {
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
   <lexer.grammarName; format = "lower">LexerInitialize();
-#else
-  ::antlr4::internal::call_once(<lexer.grammarName; format = "lower">LexerOnceFlag, <lexer.grammarName; format = "lower">LexerInitialize);
-#endif
 }
 >>
 
@@ -377,19 +367,13 @@ struct <parser.name; format = "cap">StaticData final {
 };
 
 ::antlr4::internal::OnceFlag <parser.grammarName; format = "lower">ParserOnceFlag;
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
 static thread_local
-#endif
-<parser.name; format = "cap">StaticData *<parser.grammarName; format = "lower">ParserStaticData = nullptr;
+std::unique_ptr\<<parser.name; format = "cap">StaticData> <parser.grammarName; format = "lower">ParserStaticData = nullptr;
 
 void <parser.grammarName; format = "lower">ParserInitialize() {
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
   if (<parser.grammarName; format = "lower">ParserStaticData != nullptr) {
     return;
   }
-#else
-  assert(<parser.grammarName; format = "lower">ParserStaticData == nullptr);
-#endif
   auto staticData = std::make_unique\<<parser.name; format = "cap">StaticData>(
     std::vector\<std::string>{
       <parser.ruleNames: {r | "<r>"}; separator = ", ", wrap, anchor>
@@ -402,7 +386,7 @@ void <parser.grammarName; format = "lower">ParserInitialize() {
     }
   );
   <atn>
-  <parser.grammarName; format = "lower">ParserStaticData = staticData.release();
+  <parser.grammarName; format = "lower">ParserStaticData = std::move(staticData);
 }
 
 }
@@ -457,11 +441,7 @@ bool <parser.name>::sempred(RuleContext *context, size_t ruleIndex, size_t predi
 <sempredFuncs.values; separator="\n"><endif>
 
 void <parser.name>::initialize() {
-#if ANTLR4_USE_THREAD_LOCAL_CACHE
   <parser.grammarName; format = "lower">ParserInitialize();
-#else
-  ::antlr4::internal::call_once(<parser.grammarName; format = "lower">ParserOnceFlag, <parser.grammarName; format = "lower">ParserInitialize);
-#endif
 }
 >>
 
