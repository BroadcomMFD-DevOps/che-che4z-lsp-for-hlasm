diff --git a/runtime/Cpp/runtime/src/NoViableAltException.cpp b/runtime/Cpp/runtime/src/NoViableAltException.cpp
index ced7f827f..83fb78b3b 100755
--- a/runtime/Cpp/runtime/src/NoViableAltException.cpp
+++ b/runtime/Cpp/runtime/src/NoViableAltException.cpp
@@ -16,13 +16,16 @@ NoViableAltException::NoViableAltException(Parser *recognizer)
 
 NoViableAltException::NoViableAltException(Parser *recognizer, TokenStream *input,Token *startToken,
   Token *offendingToken, atn::ATNConfigSet *deadEndConfigs, ParserRuleContext *ctx, bool deleteConfigs)
-  : RecognitionException("No viable alternative", recognizer, input, ctx, offendingToken),
-    _deadEndConfigs(deadEndConfigs), _startToken(startToken), _deleteConfigs(deleteConfigs) {
+  : RecognitionException("No viable alternative", recognizer, input, ctx, offendingToken), _startToken(startToken) {
+  if (deadEndConfigs) {
+    if(deleteConfigs)
+      _deadEndConfigs = std::shared_ptr<atn::ATNConfigSet>(deadEndConfigs);
+    else
+      _deadEndConfigs = std::shared_ptr<atn::ATNConfigSet>(deadEndConfigs, [](atn::ATNConfigSet*){});
+  }
 }
 
 NoViableAltException::~NoViableAltException() {
-  if (_deleteConfigs)
-    delete _deadEndConfigs;
 }
 
 Token* NoViableAltException::getStartToken() const {
@@ -30,5 +33,5 @@ Token* NoViableAltException::getStartToken() const {
 }
 
 atn::ATNConfigSet* NoViableAltException::getDeadEndConfigs() const {
-  return _deadEndConfigs;
+  return _deadEndConfigs.get();
 }
diff --git a/runtime/Cpp/runtime/src/NoViableAltException.h b/runtime/Cpp/runtime/src/NoViableAltException.h
index 94d43c54c..415a0d9db 100755
--- a/runtime/Cpp/runtime/src/NoViableAltException.h
+++ b/runtime/Cpp/runtime/src/NoViableAltException.h
@@ -27,10 +27,7 @@ namespace antlr4 {
 
   private:
     /// Which configurations did we try at input.index() that couldn't match input.LT(1)?
-    atn::ATNConfigSet* _deadEndConfigs;
-
-    // Flag that indicates if we own the dead end config set and have to delete it on destruction.
-    bool _deleteConfigs;
+    std::shared_ptr<atn::ATNConfigSet> _deadEndConfigs;
 
     /// The token object at the start index; the input stream might
     /// not be buffering tokens so get a reference to it. (At the
